name: Build

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  rust:
    runs-on: ubuntu-latest
    steps:
      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.4'
          cache: false
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache build
        uses: Swatinem/rust-cache@v2
      - name: Build
        run: cargo build
      - name: Check format
        run: cargo fmt --all -- --check
      - name: Lint
        run: cargo clippy --all-targets --all-features -- -D warnings

  ghcr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs:
      - rust
    if: ${{ success() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup buildx
        uses: docker/setup-buildx-action@v3
      - name: Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: h1rono
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: distroless image
        uses: ./.github/docker-mbp-action
        with:
          push: ${{ github.ref_name == 'main' && 'true' || 'false' }}
          tags: |
            type=ref,event=branch,suffix=
            type=ref,event=pr,suffix=
            type=ref,event=branch,suffix=-distroless
            type=ref,event=pr,suffix=-distroless
          target: server-distroless
          cache: "true"
      - name: debian-slim image
        uses: ./.github/docker-mbp-action
        with:
          push: ${{ github.ref_name == 'main' && 'true' || 'false' }}
          tags: |
            type=ref,event=branch,suffix=-debian-slim
            type=ref,event=pr,suffix=-debian-slim
          target: server-debian-slim
          cache: "true"

  notify-ns:
    runs-on: ubuntu-latest
    needs: [ "ghcr" ]
    if: ${{ github.ref_name == 'main' }}
    env:
      REPOSITORY: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.PAT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare
        run: mkdir ./tmp
      - name: Get webhook ID
        id: get-hook-id
        run: |
          bash .github/scripts/ns-hook.sh hook-id > ./tmp/hook-id
          echo "result=$(cat ./tmp/hook-id)" >> "$GITHUB_OUTPUT"
      - name: Get delivery ID
        id: get-delivery-id
        env:
          HOOK_ID: ${{ steps.get-hook-id.outputs.result }}
        run: |
          bash .github/scripts/ns-hook.sh push-delivery-id > ./tmp/delivery-id
          echo "result=$(cat ./tmp/delivery-id)" >> "$GITHUB_OUTPUT"
      - name: Get delivery contents
        id: get-request
        env:
          HOOK_ID: ${{ steps.get-hook-id.outputs.result }}
          DELIVERY_ID: ${{ steps.get-delivery-id.outputs.result }}
        run: |
          bash .github/scripts/ns-hook.sh delivery-request > ./tmp/delivery.json
          echo "result_file=$(pwd)/tmp/delivery.json" >> "$GITHUB_OUTPUT"
      - name: Deliver NeoShowcase
        id: delivery-neoshowcase
        env:
          DELIVERY_FILE: ${{ steps.get-request.outputs.result_file }}
          NS_ENDPOINT: ${{ secrets.NS_ENDPOINT }}
        run: |
          cat "$DELIVERY_FILE" | bash .github/scripts/ns-hook.sh request "$NS_ENDPOINT"
